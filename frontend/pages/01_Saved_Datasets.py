import numpy as np

import streamlit as st
from utils.api import send_get_request, send_delete_request

class Dataset_Display():
    def __init__(self, name, data):
        self.name = name
        self.data = data
        self.added_noise = [0] * len(data.get('data'))

def removal_confirmation(dataset_name:str):
    """
    Handles removal of an item from user's saved datasets.
    Args:
        dataset_name (int): The dataset's name (unique and generated by the user.) used to track the buttons and session states in each dataset's view.
    """
    if st.session_state[f'{dataset_name}: prompt_remove']:
        col_1, col_2 = st.columns(2, gap='small', vertical_alignment='center')
        with col_1:
            if st.button('Confirm', key=f'{dataset_name}: confirm_removal_button', width='stretch'):
                # TODO: Add actual dataset removal functionality
                name = {'name': dataset_name}
                _ = send_delete_request(endpoint='/remove-specific-dataset', payload = name)

                st.session_state['removed_dataset_status'] = True
                st.session_state[f'{dataset_name}: prompt_remove'] = False
                st.rerun()
        
        with col_2:
            if st.button(':red[Cancel]', key=f'{dataset_name}: cancel_removal_button', width='stretch'):
                st.session_state[f'{dataset_name}: prompt_remove'] = False
                st.rerun()

if __name__ == '__main__':
    st.set_page_config(
        page_title = 'Datasets'
    )
    st.sidebar.header("Datasets")
    st.header('Saved Datasets')

    current_dataset_names = send_get_request(endpoint = '/get-dataset-names').get('names')
    
    if 'removed_dataset_status' not in st.session_state:
        st.session_state['removed_dataset_status'] = False

    if st.session_state['removed_dataset_status']:
        st.success('Successfully removed dataset!')
        st.session_state['removed_dataset_status'] = False
        st.rerun()

    if len(current_dataset_names) <= 0:
        st.write('No current datasets saved.')

    for dataset_name in current_dataset_names:
        if f'{dataset_name}: prompt_remove' not in st.session_state:
            st.session_state[f'{dataset_name}: prompt_remove'] = False
        
        if f'{dataset_name}: expanded_status' not in st.session_state:
            st.session_state[f'{dataset_name}: expanded_status'] = False
        
        with st.expander(dataset_name):
            payload = {
                'name': dataset_name
            }
            dataset = send_get_request(endpoint='/get-specific-dataset', payload=payload)
            data = dataset.get('data')

            if st.button('Use this dataset', key=f'{dataset_name}: use_dataset_button', width='stretch'):
                st.session_state['current_data'] = {
                    'X': np.array(data.get('X')),
                    'y': np.array(data.get('y')), 
                    'added_noise': np.array([0.0] * len(data.get('X'))),
                    'problem_type': dataset.get('problem_type')
                }
                st.success('Updated current dataset in visualizer!')
            
            if not st.session_state[f'{dataset_name}: prompt_remove']:
                if st.button('Remove Saved Dataset', key=f'{dataset_name}: remove_dataset_button', width='stretch'):
                    st.session_state[f'{dataset_name}: prompt_remove'] = True
                    st.rerun()
            
            removal_confirmation(dataset_name)

            st.markdown('### Values in Dataset:')
            st.dataframe(data=data)
